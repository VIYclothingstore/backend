name: CI Pipeline

on:
  pull_request:
    branches:
      - main

jobs:
  check-code-quality:
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Клонирование кода
      - name: Checkout code
        uses: actions/checkout@v4

      # Шаг 2: Установка Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # Шаг 3: Установка Poetry
      - name: Install Poetry
        run: pip install poetry && poetry install

      # Шаг 4: Проверка качества кода
      - name: Run formatters
        run: |
          poetry run black --check .
          poetry run isort --check . --profile black

  build-and-test:
    runs-on: ubuntu-latest
    needs: check-code-quality  # Выполняется только после успешной проверки качества кода

    services:
      db:
        image: postgres:16.2
        env:
          POSTGRES_USER: admin_user
          POSTGRES_PASSWORD: admin
          POSTGRES_DB: test_clothing_store
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U admin_user -d test_clothing_store"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:  # Переменные окружения, доступные для контейнеров и команд
      SERVER_PORT: 8000
      POSTGRES_USER: admin_user
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: test_clothing_store
      DB_PORT: 5432
      DB_HOST: db

    steps:
      # Шаг 1: Клонирование кода
      - name: Checkout code
        uses: actions/checkout@v4

      # Шаг 2: Установка Docker Compose
      - name: Set up Docker Compose
        run: sudo apt-get update && sudo apt-get install -y docker-compose

      # Шаг 3: Сборка контейнеров
      - name: Build containers
        run: docker-compose build

      # Шаг 4: Запуск базы данных
      - name: Start database service
        run: docker-compose up -d db

      # Шаг 5: Ожидание готовности базы данных
      - name: Wait for Database
        run: |
          until docker-compose exec db pg_isready -U admin_user -d test_clothing_store; do
            echo "Waiting for database..."
            sleep 2
          done

      # Шаг 6: Запуск миграций
      - name: Run migrations
        run: docker-compose run api python ./src/manage.py migrate

      # Шаг 7: Запуск тестов
      - name: Run tests
        run: docker-compose run api pytest --cov=.


